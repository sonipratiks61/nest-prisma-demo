// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int          @id @default(autoincrement())
  email        String       @unique
  password     String
  mobileNumber String       @unique
  businessName String
  name         String
  gstNumber    String?
  addresses    Address[]
  attachments  Attachment[]
  roleId       Int
  role         Role?        @relation(fields: [roleId], references: [id])
  acceptTerms  Boolean
  isActive     Boolean      @default(false) // for admin approval
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  categories   Category[]
  products     Product[]
}

model Address {
  id        Int      @id @default(autoincrement())
  userId    Int
  country   String
  state     String
  city      String
  pinCode   String
  address   String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id                       Int                        @id @default(autoincrement())
  capabilities             Capability[] // Linked to capabilities
  name                     String                     @unique
  roleAndCapabilityMapping RoleAndCapabilityMapping[]
  users                    User[]
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
}

model Capability {
  id                       Int                        @id @default(autoincrement())
  name                     String                     @unique
  roleAndCapabilityMapping RoleAndCapabilityMapping[]
  roleId                   Int
  role                     Role                       @relation(fields: [roleId], references: [id]) // Explicit relation to Role
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
}

model GeoLocation {
  id      Int    @id @default(autoincrement())
  state   String
  city    String
  pincode String
}

model Attachment {
  id             Int      @id @default(autoincrement())
  path           String
  attachmentType String
  userId         Int
  user           User     @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model RoleAndCapabilityMapping {
  capabilityId Int
  roleId       Int
  capability   Capability @relation(fields: [capabilityId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@id([capabilityId, roleId])
}

model Category {
  id            Int          @id @default(autoincrement())
  userId        Int
  parentId      Int
  category      Category     @relation("subCategories", fields: [parentId], references: [id])
  subCategories Category[]   @relation("subCategories")
  name          String
  description   String
  product       Product[]
  user          User         @relation(fields: [userId], references: [id])
  type          CategoryType                                      
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}
 
model Product {
  id            Int         @id @default(autoincrement())
  categoryId    Int
  productName   String
  cost          String
  gst           String
  category      Category    @relation(fields: [categoryId], references: [id])
  attributes    Attribute[]
  AmountPayable String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  User          User        @relation(fields: [userId], references: [id])
  userId        Int
}

model Attribute {
  id                    Int      @id @default(autoincrement())
  productId             Int
  quanitity             Int
  service               Boolean
  product               Product  @relation(fields: [productId], references: [id])
  printing              String
  dieShape              String
  textureType           String
  paperQuality          String
  colour                String
  paperQuanlity         String
  pocket                String
  binding               String
  envelopeCode          String
  flapOpening           String
  windowCutting         String
  paperType             String
  size                  String
  lamination            String
  halfCut               String
  firstPaperQuality     String
  secondCopyPaperColor  String
  thirdCopyPaperColor   String
  stickersCountPerSheet String
  penType               String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

  enum CategoryType {
  service
  physical
}
