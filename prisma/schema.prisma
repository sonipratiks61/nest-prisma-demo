// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                     @id @default(autoincrement())
  email                 String                  @unique
  password              String
  mobileNumber          String?                 @unique
  businessName          String
  name                  String
  gstNumber             String?
  addresses             Address[]
  attachments           Attachment[]
  attachmentAssociation AttachmentAssociation[] @relation("user_attachmentAssociations")
  roleId                Int
  role                  Role?                   @relation(fields: [roleId], references: [id])
  acceptTerms           Boolean
  isActive              Boolean                 @default(false) // for admin approval
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  categories            Category[]
  products              Product[]
}

model Address {
  id        Int      @id @default(autoincrement())
  userId    Int
  country   String
  state     String
  city      String
  pinCode   String
  address   String?
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id                       Int                        @id @default(autoincrement())
  capabilities             Capability[] // Linked to capabilities
  name                     String                     @unique
  roleAndCapabilityMapping RoleAndCapabilityMapping[]
  users                    User[]
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
}

model Capability {
  id                       Int                        @id @default(autoincrement())
  name                     String                     @unique
  roleAndCapabilityMapping RoleAndCapabilityMapping[]
  roleId                   Int
  role                     Role                       @relation(fields: [roleId], references: [id]) // Explicit relation to Role
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
}

model GeoLocation {
  id      Int    @id @default(autoincrement())
  state   String
  city    String
  pincode String
}

model Attachment {
  id             Int                     @id @default(autoincrement())
  path           String
  attachmentType String
  userId         Int
  associations   AttachmentAssociation[]
  user           User                    @relation(fields: [userId], references: [id])
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt

  @@map("attachments") // Optional: maps the model to a table named "attachments"
}

model RoleAndCapabilityMapping {
  capabilityId Int
  roleId       Int
  capability   Capability @relation(fields: [capabilityId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@id([capabilityId, roleId])
}

model Category {
  id                     Int                     @id @default(autoincrement())
  userId                 Int
  parentId               Int?                   
  parent                 Category?               @relation("CategoryToSubcategories", fields: [parentId], references: [id])
  subCategories          Category[]              @relation("CategoryToSubcategories")
  name                   String
  description            String
  product                Product[]
  attachmentAssociations AttachmentAssociation[] @relation("category_attachmentAssociations")
  user                   User                    @relation(fields: [userId], references: [id])
  type                   CategoryType
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
}

model Product {
  id                    Int                     @id @default(autoincrement())
  categoryId            Int
  name                  String
  description           String                  @db.Text
  quantity              Json?
  category              Category?               @relation(fields: [categoryId], references: [id])
  AttachmentAssociation AttachmentAssociation[] @relation("product_attachmentAssociations")
  price                 String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  User                  User                    @relation(fields: [userId], references: [id])
  userId                Int
  isFitmentRequired       Boolean
  isMeasurementRequired   Boolean
  ProductAttribute      ProductAttribute[]
}

model ProductAttribute {
  id        Int           @id @default(autoincrement())
  productId Int
  name      String
  product   Product       @relation(fields: [productId], references: [id])
  type      AttributeType
  options  Json?     
}

enum AttributeType {
  text
  dropDown
}

model Attribute {
  id        Int      @id @default(autoincrement())
  name      String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AttachmentAssociation {
  id           Int        @id @default(autoincrement())
  category     Category   @relation("category_attachmentAssociations", fields: [categoryId], references: [id])
  productId    Int
  product      Product    @relation("product_attachmentAssociations", fields: [productId], references: [id])
  userId       Int
  user         User       @relation("user_attachmentAssociations", fields: [userId], references: [id])
  categoryId   Int
  attachment   Attachment @relation(fields: [attachmentId], references: [id])
  attachmentId Int
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}
model OrderStatus{
  id         Int      @id @default(autoincrement())
  status     String
  description String  @db.Text
  dependOn   Int 
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum CategoryType {
  service
  physical
}
